from django.conf import settings
from django.contrib.auth.models import AbstractUser
from django.contrib.sessions.models import Session
from django.db import models
from django.forms import ModelForm, Textarea, TextInput
from django.utils.translation import gettext_lazy as _


from datetime import datetime as dt


# MODELS
class User(AbstractUser):
    pass


category_choices = [
    ('Electronics', 'Electronics'),
    ('Home', 'Home'),
    ('Toys', "Toys"),
    ('Fashion', "Fashion")
]


# Auction Listings
class ListingItem(models.Model):
    # Form
    title = models.CharField(max_length=50)
    description = models.CharField(max_length=250)
    starting_bid = models.FloatField()
    img_url = models.URLField(blank=True)  # models.ImageField()
    category = models.CharField(max_length=50, choices=category_choices)

    # Auto-generated when submitted
    starting_date = models.DateTimeField(auto_now=True)
    author = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )  # ForeigKey to User.

    # Statuses
    is_active = models.BooleanField(default=True)
    in_watchlist = models.BooleanField(default=False)

    # Variable keeps track of current highest bid
    highest_bid = models.FloatField(default=0)
    highest_bid_user = models.CharField(max_length=50, blank=True, null=True)

    def __str__(self):
        return f"{self.title}"


# https://stackoverflow.com/questions/63403309/watchlist-system-on-django
class WatchList(models.Model):
    # id - autogenerated
    # user_id
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )  # ForeigKey to User

    # item_id
    item = models.ForeignKey(
        ListingItem,
        on_delete=models.CASCADE,
        )

    class Meta:
        unique_together = ('user', 'item')

    def __str__(self):
        return f"{self.item}"
        # return f"User ID: {self.user}, Item ID: {self.item}"


# - Bids
class Bid(models.Model):
    bid = models.FloatField()
    # date = models.DateTimeField()

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )  # ForeigKey to User

    item = models.ForeignKey(
        ListingItem,
        on_delete=models.CASCADE,
    )  # ForeigKey to User

    models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user} Bid ${self.bid} on {self.item}"


# - Comments on auction listings
class ListingComment(models.Model):
    comment = models.CharField(max_length=500, verbose_name="")
    author = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )  # ForeigKey to User

    item = models.ForeignKey(
        ListingItem,
        on_delete=models.CASCADE,
    )  # ForeigKey to ListingItem

    date = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.comment}"


# class Category(models.Model):
#     name = models.CharField(max_length=100)
#     item = models.ManyToManyField(ListingItem)

#     def __str__(self):
#         return f"{self.name}"


# FORMS
class AddListingItemForm(ModelForm):
    class Meta:
        model = ListingItem
        fields = [  # fields = '__all__'
            'title',
            'description',
            'starting_bid',
            'img_url',
            'category'
        ]

        labels = {
            # Name of field : label Text
            'title': 'Title',
            'description': 'Description',
            'starting_bid': 'Starting Bid',
            'img_url': 'Image URL',
            'category': 'Category'
        }
        # https://colinkingswood.github.io/Model-Form-Customisation/
        # widgets = {

        # }


class BidForm(ModelForm):
    class Meta:
        model = Bid
        fields = {
            'bid': 'Bid',
        }
        widgets = {
            'bid': TextInput(attrs={'placeholder': 'Please insert your bid amount'})
        }
        error_messages = {
            'bid': {
                'max_length': _("Your bid is too low!"),
            },
        }


class CommentForm(ModelForm):
    class Meta:
        model = ListingComment
        fields = ['comment']
        widgets = {
            'comment': Textarea(attrs={'cols': 40, 'rows': 5}),
        }
